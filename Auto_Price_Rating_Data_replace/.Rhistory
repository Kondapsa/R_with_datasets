Auto_Price_Rating_Data <- read.csv(file.choose(), header = TRUE)
attach(Auto_Price_Rating_Data)
summary(Auto_Price_Rating_Data)
bore_Na<-which(is.na(Auto_Price_Rating_Data$Bore))
Auto_Price_Rating_Data_no_NA<-Auto_Price_Rating_Data[-c(bore_Na),]
#replacing the missing values of Bore with Mean of that Column
Auto_Price_Rating_Data_replace <- Auto_Price_Rating_Data
Auto_Price_Rating_Data_replace$Bore[bore_Na] <- mean(Auto_Price_Rating_Data$Bore,na.rm = TRUE)
#replacing the missing values of Stroke with Median of that Column
Stroke_NA <- which(is.na(Auto_Price_Rating_Data$Stroke))
Auto_Price_Rating_Data_replace$Stroke[Stroke_NA] <- median(Auto_Price_Rating_Data$Stroke,na.rm = TRUE)
#replacing the missing values of Horsepower with Mean of that Column
Horsepower_NA <- which(is.na(Auto_Price_Rating_Data$Horsepower))
Auto_Price_Rating_Data_replace$Horsepower[Horsepower_NA] <- mean(Auto_Price_Rating_Data$Horsepower,na.rm = TRUE)
#replacing the missing values of Peak-rpm with Median of that Column
Peak_NA <- which(is.na(Auto_Price_Rating_Data$`Peak-rpm`))
Auto_Price_Rating_Data_replace$`Peak-rpm`[Peak_NA] <- median(Auto_Price_Rating_Data$`Peak-rpm`,na.rm = TRUE)
#replacing the missing values of Price with Mean of that Column
Price_NA <- which(is.na(Auto_Price_Rating_Data$Price))
Auto_Price_Rating_Data_replace$Price[Price_NA] <- mean(Auto_Price_Rating_Data$Price,na.rm = TRUE)
View(Auto_Price_Rating_Data_replace)
attach(Auto_Price_Rating_Data_replace)
attach(Auto_Price_Rating_Data_replace)
data4 <- Auto_Price_Rating_Data_replace
sapply(data4,mean,na.rm = TRUE)
summary(data4)
#One sample t-test
t.test(Horsepower,mu=105)
#Two sample t-test
t.test(Horsepower,Price,var.equal = TRUE,paired = FALSE)
#2 sample variance test
var.test(Horsepower,Price)
#ANOVA
fit <- aov(Horsepower~Price, data=data2)
plot(fit)
#ANOVA
fit <- aov(Horsepower~Price, data=data4)
plot(fit)
mat.cases = length(which(Performance..Rating == 'High' & Emission.Standards == 'Meeting'))
nmat.cases = length(which(Performance..Rating == 'High' & Emission.Standards == 'Not Meeting'))
col.cases = c(mat.cases, nmat.cases)
mat.total = length(which(Emission.Standards == 'Meeting'))
nmat.total = length(which(Emission.Standards == 'Not Meeting'))
col.total= c(mat.total, nmat.total)
prop.test(col.cases, col.total, alternative =  "greater")
#Chisquare test
tbl1 = table(Auto_Price_Rating_Data_replace$Stroke, Auto_Price_Rating_Data_replace$Performance..Rating)
tbl1
chisq.test(tbl1)
# k fold cross validation(10)
Auto_Price_Rating_Data_replace<-Auto_Price_Rating_Data_replace[sample(nrow(Auto_Price_Rating_Data_replace)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(Auto_Price_Rating_Data_replace)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Auto_Price_Rating_Data_replace[testIndexes, ]
trainData <- Auto_Price_Rating_Data_replace[-testIndexes, ]
}
head(testData)
head(trainData)
#Logistic Regression
Auto_Price_Rating_Data_replace$Emission.Standards <- factor(Auto_Price_Rating_Data_replace$Emission.Standards)
mylogit <- glm(Emission.Standards ~ Horsepower + Curb.weight + Stroke + Bore , data = Auto_Price_Rating_Data_replace, family = "binomial")
summary(mylogit)
sc <- read.csv(file.choose(), header = TRUE)
attach(sc)
summary(sc)
APM_Na<-which(is.na(sc$APM))
sc_no_NA<-sc[-c(APM_Na),]
#replacing the missing values of APM with Mean of that Column
sc_replace <- sc
sc_replace$APM[APM_Na] <- mean(sc$APM,na.rm = TRUE)
#replacing the missing values of GapBetweenPACs with Median of that Column
GapBetweenPACs_NA <- which(is.na(sc$GapBetweenPACs))
sc_replace$GapBetweenPACs[GapBetweenPACs_NA] <- median(sc$GapBetweenPACs,na.rm = TRUE)
#replacing the missing values of WorkersMade with Mean of that Column
WorkersMade_NA <- which(is.na(sc$WorkersMade))
sc_replace$WorkersMade[WorkersMade_NA] <- mean(sc$WorkersMade,na.rm = TRUE)
#replacing the missing values of UniqueHotkeys with Median of that Column
UniqueHotkeys_NA <- which(is.na(sc$`UniqueHotkeys`))
sc_replace$`UniqueHotkeys`[UniqueHotkeys_NA] <- median(sc$`UniqueHotkeys`,na.rm = TRUE)
View(sc_replace)
attach(sc_replace)
data7 <- sc_replace
sapply(data7,mean,na.rm = TRUE)
summary(data7)
#Chisquare test
tbl3 = table(sc_replace$UniqueHotkeys, sc_replace$UniqueUnitsMade)
tbl3
chisq.test(tbl3)
# k fold cross validation(10)
sc_replace<-sc_replace[sample(nrow(sc_replace)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(sc_replace)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- sc_replace[testIndexes, ]
trainData <- sc_replace[-testIndexes, ]
}
head(testData)
head(trainData)
Auto_Price_Rating_Data <- read.csv(file.choose(), header = TRUE)
attach(Auto_Price_Rating_Data)
summary(Auto_Price_Rating_Data)
bore_Na<-which(is.na(Auto_Price_Rating_Data$Bore))
Auto_Price_Rating_Data_no_NA<-Auto_Price_Rating_Data[-c(bore_Na),]
#replacing the missing values of Bore with Mean of that Column
Auto_Price_Rating_Data_replace <- Auto_Price_Rating_Data
Auto_Price_Rating_Data_replace$Bore[bore_Na] <- mean(Auto_Price_Rating_Data$Bore,na.rm = TRUE)
#replacing the missing values of Stroke with Median of that Column
Stroke_NA <- which(is.na(Auto_Price_Rating_Data$Stroke))
Auto_Price_Rating_Data_replace$Stroke[Stroke_NA] <- median(Auto_Price_Rating_Data$Stroke,na.rm = TRUE)
#replacing the missing values of Horsepower with Mean of that Column
Horsepower_NA <- which(is.na(Auto_Price_Rating_Data$Horsepower))
Auto_Price_Rating_Data_replace$Horsepower[Horsepower_NA] <- mean(Auto_Price_Rating_Data$Horsepower,na.rm = TRUE)
#replacing the missing values of Peak-rpm with Median of that Column
Peak_NA <- which(is.na(Auto_Price_Rating_Data$`Peak-rpm`))
Auto_Price_Rating_Data_replace$`Peak-rpm`[Peak_NA] <- median(Auto_Price_Rating_Data$`Peak-rpm`,na.rm = TRUE)
#replacing the missing values of Price with Mean of that Column
Price_NA <- which(is.na(Auto_Price_Rating_Data$Price))
Auto_Price_Rating_Data_replace$Price[Price_NA] <- mean(Auto_Price_Rating_Data$Price,na.rm = TRUE)
View(Auto_Price_Rating_Data_replace)
View(Auto_Price_Rating_Data_replace)
attach(Auto_Price_Rating_Data_replace)
#Boxplot
boxplot(Price~`Num.of.doors`,xlab="number of doors",ylab="price")
boxplot(Price ~ `Num.of.cylinders`,col=(c("gold","darkgreen")))
#barplot
count <- Auto_Price_Rating_Data_replace$`Length`
barplot(count,xlab = "Length")
#Histogram
hist(Horsepower)
hist(Price)
labels <- c(`Fuel.Type`)
#Piechart
x <- c(`Wheel.base`)
pie(x,labels)
#Scatter plot
scatter.smooth(Curb.weight,Price,xlab = "Curb-Weight",ylab = "Price")
# pair-wise scatterplots colored by class
pairs(Curb.weight~Horsepower, data=Auto_Price_Rating_Data_replace, col=Auto_Price_Rating_Data_replace$Curb.weight)
attach(Auto_Price_Rating_Data_replace)
data4 <- Auto_Price_Rating_Data_replace
sapply(data4,mean,na.rm = TRUE)
summary(data4)
#One sample t-test
t.test(Horsepower,mu=105)
#Two sample t-test
t.test(Horsepower,Price,var.equal = TRUE,paired = FALSE)
#2 sample variance test
var.test(Horsepower,Price)
#ANOVA
fit <- aov(Horsepower~Price, data=data4)
plot(fit)
prop.test(x=c(2,10),n=c(2+50,10+30),correct = FALSE)
mat.cases = length(which(Performance..Rating == 'High' & Emission.Standards == 'Meeting'))
nmat.cases = length(which(Performance..Rating == 'High' & Emission.Standards == 'Not Meeting'))
col.cases = c(mat.cases, nmat.cases)
mat.total = length(which(Emission.Standards == 'Meeting'))
nmat.total = length(which(Emission.Standards == 'Not Meeting'))
col.total= c(mat.total, nmat.total)
prop.test(col.cases, col.total, alternative =  "greater")
#Chisquare test
tbl1 = table(Auto_Price_Rating_Data_replace$Stroke, Auto_Price_Rating_Data_replace$Performance..Rating)
tbl1
chisq.test(tbl1)
# k fold cross validation(10)
Auto_Price_Rating_Data_replace<-Auto_Price_Rating_Data_replace[sample(nrow(Auto_Price_Rating_Data_replace)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(Auto_Price_Rating_Data_replace)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Auto_Price_Rating_Data_replace[testIndexes, ]
trainData <- Auto_Price_Rating_Data_replace[-testIndexes, ]
}
head(testData)
head(trainData)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Linear model
lm(formula = Wheel.base~Length)
#R square
Auto_Price_Rating_Data_replace.lm = lm(Price ~ Curb.weight, data=Auto_Price_Rating_Data_replace)
summary(Auto_Price_Rating_Data_replace.lm)$r.squared
#R square
Auto_Price_Rating_Data_replace.lm = lm(Horsepower ~ Curb.weight, data=Auto_Price_Rating_Data_replace)
summary(Auto_Price_Rating_Data_replace.lm)$r.squared
# the target multiple regression model
res <- lm(Price ~ Curb.weight+Stroke+Horsepower, data=Auto_Price_Rating_Data_replace)
summary(res)
#Logistic Regression
Auto_Price_Rating_Data_replace$Emission.Standards <- factor(Auto_Price_Rating_Data_replace$Emission.Standards)
mylogit <- glm(Emission.Standards ~ Horsepower + Curb.weight + Stroke + Bore , data = Auto_Price_Rating_Data_replace, family = "binomial")
summary(mylogit)
