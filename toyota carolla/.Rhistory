attach(sc_replace)
sc <- read.csv(file.choose(), header = TRUE)
attach(sc)
summary(sc)
APM_Na<-which(is.na(sc$APM))
sc_no_NA<-sc[-c(APM_Na),]
#replacing the missing values of APM with Mean of that Column
sc_replace <- sc
sc_replace$APM[APM_Na] <- mean(sc$APM,na.rm = TRUE)
#replacing the missing values of GapBetweenPACs with Median of that Column
GapBetweenPACs_NA <- which(is.na(sc$GapBetweenPACs))
sc_replace$GapBetweenPACs[GapBetweenPACs_NA] <- median(sc$GapBetweenPACs,na.rm = TRUE)
#replacing the missing values of WorkersMade with Mean of that Column
WorkersMade_NA <- which(is.na(sc$WorkersMade))
sc_replace$WorkersMade[WorkersMade_NA] <- mean(sc$WorkersMade,na.rm = TRUE)
#replacing the missing values of UniqueHotkeys with Median of that Column
UniqueHotkeys_NA <- which(is.na(sc$`UniqueHotkeys`))
sc_replace$`UniqueHotkeys`[UniqueHotkeys_NA] <- median(sc$`UniqueHotkeys`,na.rm = TRUE)
View(sc_replace)
View(sc_replace)
attach(sc_replace)
#Boxplot
boxplot(APM~ UniqueHotkeys,xlab="UniqueHotkeys",ylab="APM")
boxplot(APM ~ LeagueIndex,col=(c("gold","darkgreen")))
#barplot
count1 <- sc_replace$MinimapAttacks
barplot(count1,xlab = "MinimapAttacks")
#Histogram
hist(HP)
#Histogram
hist(NumberOfPACs)
hist(APM)
#Piechart
x <- c(LeagueIndex)
labels <- c(Age)
pie(x,labels)
#Piechart
x <- c(LeagueIndex)
labels <- c(APM)
pie(x,labels)
#Piechart
x <- c(GapBetweenPACs)
labels <- c(NumberOfPACs)
pie(x,labels)
#Piechart
x <- c(Age)
labels <- c(NumberOfPACs)
pie(x,labels)
#Piechart
x <- c(APM)
labels <- c(NumberOfPACs)
pie(x,labels)
pie(x,labels)
#Piechart
x <- c(APM)
labels <- c(HoursPerWeek)
pie(x,labels)
#Scatter plot
scatter.smooth(Weight,Price,xlab = "Weight",ylab = "Price")
#Piechart
x <- c(HoursPerWeek)
labels <- c(HoursPerWeek)
pie(x,labels)
#Piechart
x <- c(HoursPerWeek)
labels <- c(GameID)
pie(x,labels)
#Scatter plot
scatter.smooth(APM,ComplexAbilitiesUsed,xlab = "APM",ylab = "ComplexAbilitiesUsed")
# pair-wise scatterplots colored by class
pairs(ComplexUnitsMade~ComplexAbilitiesUsed, data=sc_replace, col=sc_replace$cc)
# pair-wise scatterplots colored by class
pairs(APM~ComplexAbilitiesUsed, data=sc_replace, col=sc_replace$ComplexAbilitiesUsed)
# pair-wise scatterplots colored by class
pairs(APM~ComplexAbilitiesUsed, data=sc_replace, col=sc_replace$APM)
attach(Sc_replace)
attach(sc_replace)
data7 <- Sc_replace
data7 <- sc_replace
sapply(data7,mean,na.rm = TRUE)
summary(data7)
#One sample t-test
t.test(APM,mu=120.33)
#One sample t-test
t.test(APM,mu=114.33)
#Two sample t-test
t.test(APM,AssignToHotkeys,var.equal = TRUE,paired = FALSE)
#f-test
var.test(APM,ComplexAbilitiesUsed)
#ANOVA
fit <- aov(APM~SelectByHotkeys, data=data7)
plot(fit)
#ANOVA
fit <- aov(APM~TotalHours, data=data7)
plot(fit)
#Linear model
lm(formula = APM~TotalHours)
#Linear model
lm(formula = APM~WorkersMade)
#R square
Sc_replace.lm = lm(APM ~ MinimapAttacks, data=Sc_replace)
#R square
sc_replace.lm = lm(APM ~ MinimapAttacks, data=sc_replace)
summary(sc_replace.lm)$r.squared
#R square
sc_replace.lm = lm(APM ~ ComplexAbilitiesUsed, data=sc_replace)
summary(sc_replace.lm)$r.squared
source('~/.active-rstudio-document')
#R square
sc_replace.lm = lm(APM ~ WorkersMade, data=sc_replace)
summary(sc_replace.lm)$r.squared
#R square
sc_replace.lm = lm(HP ~ SelectByHotkeys, data=sc_replace)
#R square
sc_replace.lm = lm(APM ~ SelectByHotkeys, data=sc_replace)
summary(sc_replace.lm)$r.squared
# the target multiple regression model
res1 <- lm(APM ~ SelectByHotkeys+AssignToHotkeys+ActionLatency, data=sc_replace)
summary(res1)
attach(tc_replace)
tc <- read.csv(file.choose(), header = TRUE)
attach(tc)
summary(tc)
Price_Na<-which(is.na(tc$Price))
tc_no_NA<-tc[-c(Price_Na),]
#replacing the missing values of Price with Mean of that Column
tc_replace <- tc
tc_replace$Price[Price_Na] <- mean(tc$Price,na.rm = TRUE)
#replacing the missing values of KM with Median of that Column
KM_NA <- which(is.na(tc$KM))
tc_replace$KM[KM_NA] <- median(tc$KM,na.rm = TRUE)
#replacing the missing values of Horsepower with Mean of that Column
HP_NA <- which(is.na(tc$HP))
tc_replace$HP[HP_NA] <- mean(tc$HP,na.rm = TRUE)
#replacing the missing values of Weight with Median of that Column
Weight_NA <- which(is.na(tc$`Weight`))
tc_replace$`Weight`[Weight_NA] <- median(tc$`Weight`,na.rm = TRUE)
View(tc_replace)
attach(tc_replace)
mat.total = length(which(Met_Color==1))
nmat.total = length(which(Met_Color==0))
col.total= c(mat.total, nmat.total)
#Now we will do a two-sample test for proportions (note the one-sided alternative here!)
prop.test(col.total, col.total, alternative =  "greater")
mat.cases = length(which(case == 1 & Met_Color == 1))
nmat.cases = length(which(case == 1 & Met_Color == 0))
col.cases = c(male.cases, female.cases)
mat.total = length(which(Met_Color==1))
nmat.total = length(which(Met_Color==0))
col.total= c(mat.total, nmat.total)
#Now we will do a two-sample test for proportions (note the one-sided alternative here!)
prop.test(col.total, col.total, alternative =  "greater")
mat.cases = length(which(case == 1 & Met_Color == 1))
nmat.cases = length(which(case == 1 & Met_Color == 0))
col.cases = c(male.cases, female.cases)
mat.total = length(which(Met_Color==1))
nmat.total = length(which(Met_Color==0))
col.total= c(mat.total, nmat.total)
#Now we will do a two-sample test for proportions (note the one-sided alternative here!)
prop.test(col.total, col.total, alternative =  "greater")
table1= table(tc_replace$Fuel_Type,tc_replace$Mfr_Guarantee)
table1
prop.test(table1,correct = FALSE)
prop.test(x=c(2,10),n=c(2+50,10+30),correct = FALSE)
#1,2 Proportion Test
mat.cases = length(which(case == 1 & Met_Color == 1))
nmat.cases = length(which(case == 1 & Met_Color == 0))
col.cases = c(male.cases, female.cases)
mat.total = length(which(Met_Color==1))
nmat.total = length(which(Met_Color==0))
col.total= c(mat.total, nmat.total)
#Now we will do a two-sample test for proportions (note the one-sided alternative here!)
prop.test(col.total, col.total, alternative =  "greater")
#------------------------------------------------------------------------------------------
table1= table(tc_replace$Fuel_Type,tc_replace$Mfr_Guarantee)
table1
prop.test(table1,correct = FALSE)
prop.test(x=c(2,10),n=c(2+50,10+30),correct = FALSE)
mat.cases = length(which(Automatic == 1 & Met_Color == 1))
nmat.cases = length(which(Automatic == 1 & Met_Color == 0))
col.cases = c(mat.cases, nmat.cases)
mat.total = length(which(Met_Color==1))
nmat.total = length(which(Met_Color==0))
col.total= c(mat.total, nmat.total)
#Now we will do a two-sample test for proportions (note the one-sided alternative here!)
prop.test(col.total, col.total, alternative =  "greater")
mat.cases = length(which(Automatic == 1 & Met_Color == 1))
nmat.cases = length(which(Automatic == 1 & Met_Color == 0))
col.cases = c(mat.cases, nmat.cases)
mat.total = length(which(Met_Color==1))
nmat.total = length(which(Met_Color==0))
col.total= c(mat.total, nmat.total)
prop.test(col.cases, col.total, alternative =  "greater")
set.seed(23)
dat <- rnorm(20, mean = 2, sd = 1)
varTest(dat, sigma.squared = 0.5)
#f-test
var.test(HP,Price)
#2 variance test
var.test(HP,Price,alternative = "two.sided")
#Chisquare test
tbl = table(tc_replace$Model, tc_replace$cc)
tbl
chisq.test(tbl)
#Chisquare test
tbl = table(tc_replace$Met_Color, tc_replace$cc)
tbl
#Chisquare test
tbl = table(tc_replace$cc, tc_replace$Met_Color)
tbl
chisq.test(tbl)
poisson.test(HP, T = 1, r = 1,
alternative = c("two.sided", "less", "greater"),
conf.level = 0.95)
poisson.test(HP, T = 1, r = 1,
alternative = c("two.sided"),
conf.level = 0.95)
poisson.test(Met_Color, T = 1, r = 1,
alternative = c("two.sided"),
conf.level = 0.95)
#1,2 poisson test
dat6 <-data.table(Events=c(Met_Color))
#1,2 poisson test
dat6 <-tc_replace.table(Events=c(Met_Color))
#1,2 poisson test
dat6 <-tc_replace(Events=c(Met_Color))
#1,2 poisson test
poisson.test(HP, T = 1, r = 1,alternative = c("two.sided"),conf.level = 0.95)
#1,2 poisson test
poisson.test(cc, T = 1, r = 1,alternative = c("two.sided"),conf.level = 0.95)
#1,2 poisson test
poisson.test(BOVAG_Guarantee, T = 1, r = 1,alternative = c("two.sided"),conf.level = 0.95)
# poisson test
poisson.test(HP,cc)
poisson.test()
library(caret)
library(rpart)
install.packages("caret")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
#--------------------------------------------------------------------------------------
#K fold
# define training control
train_control<- trainControl(method="cv", number=10)
#K fold
yourdata<-yourdata[sample(nrow(yourdata)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(yourdata)),breaks=10,labels=FALSE)
#K fold
tc_replace<-tc_replace[sample(nrow(tc_replace)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(tc_replace)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- yourdata[testIndexes, ]
trainData <- yourdata[-testIndexes, ]
#Use the test and train data partitions however you desire...
}
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- tc_replace[testIndexes, ]
trainData <- tc_replace[-testIndexes, ]
#Use the test and train data partitions however you desire...
}
head(testData)
head(trainData)
# the target multiple regression model
res <- lm(Price ~ cc+Weight+HP, data=tc_replace)
summary(res)
#Logistic Regression
tc_replace$BOVAG_Guarantee <- factor(tc_replace$BOVAG_Guarantee)
mylogit <- glm(Price ~ cc + HP + BOVAG_Guarantee, data = mydata, family = "binomial")
mylogit <- glm(Price ~ cc + HP + BOVAG_Guarantee, data = tc_replace, family = "binomial")
mylogit <- glm(BOVAG_Guarantee ~ cc + HP + Price, data = tc_replace, family = "binomial")
summary(mylogit)
